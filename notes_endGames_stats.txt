Understood. To ensure that only games against the AI update user stats, we can
 modify the endGame method in the ChessGame class to conditionally update 
 stats based on the game mode. Specifically, we will only update stats if the game 
mode is "ai".
class ChessGame {
    // ... existing code ...

    endGame(message, result) {
        clearInterval(this.timerInterval);
        this.gameOver = true; // Set the game over flag
        alert(message);
        // Optionally, you can disable further moves
        this.board.draggable = false;
        // Update user stats only if the game mode is "ai"
        if (this.gameMode === "ai") {
            this.updateUserStats(result);
        }
    }

    updateUserStats(result) {
        const xhr = new XMLHttpRequest();
        xhr.open('POST', 'update_stats.php', true);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                console.log('Response from server:', xhr.responseText); // Debugging statement
                if (xhr.status === 200) {
                    console.log('Stats updated successfully');
                } else {
                    console.error('Failed to update stats');
                }
            }
        };
        console.log(`Sending data: result=${result}&gameMode=${this.gameMode}`); // Debugging statement
        xhr.send(`result=${result}&gameMode=${this.gameMode}`);
    }

    // ... existing code ...
}

The `LocalGame` class does not need any changes, as it will inherit the 
`endGame` method from the `ChessGame` class, which now conditionally 
updates stats based on the game mode.
class LocalGame extends ChessGame {
  constructor(boardId, timers, gameLength, increment, playerColor) {
    super(boardId, timers, gameLength, increment, "local", playerColor);
  }

  onDrop(source, target) {
    if (this.gameOver) return "snapback"; // Prevent moves if the game is over
    const move = this.game.move({
      from: source,
      to: target,
      promotion: "q", // Always promote to a queen for simplicity
    });
    if (move === null) return "snapback"; // Illegal move
    this.board.position(this.game.fen());
    // Check for game-ending conditions
    if (this.game.in_checkmate()) {
      const winner = this.currentPlayer === "white" ? "White" : "Black";
      this.endGame(`${winner} wins by checkmate!`, winner === this.playerColor ? "win" : "loss");
      return;
    }
    if (this.game.in_draw() || this.game.in_stalemate() || this.game.in_threefold_repetition()) {
      this.endGame("Draw!", "draw");
      return;
    }
    this.addIncrementToCurrentPlayer();
    this.switchPlayer();
  }

  switchPlayer() {
    super.switchPlayer();
  }
}
The AIGame class will also inherit the updated endGame method from the ChessGame class,
 ensuring that stats are updated only for AI games.
 class AIGame extends ChessGame {
  constructor(boardId, timers, gameLength, increment, playerColor) {
      super(boardId, timers, gameLength, increment, "ai", playerColor);
      this.initializeStockfish();
  }

  initializeStockfish() {
      this.stockfish = new Worker("js/stockfish.js");
      this.stockfish.onmessage = this.onStockfishMessage.bind(this);
      this.stockfish.postMessage("uci");
      this.stockfish.postMessage("ucinewgame");
      this.stockfish.postMessage("isready");
      console.log("Stockfish initialized"); // Debugging statement
  }

  startGame() {
      super.startGame();
      if (this.playerColor === "black") {
          this.makeAIMove();
      }
  }

  makeAIMove() {
      if (this.gameOver) return; // Prevent AI moves if the game is over
      const fen = this.game.fen();
      console.log(`Sending position to Stockfish: ${fen}`); // Debugging statement
      this.stockfish.postMessage(`position fen ${fen}`);
      this.stockfish.postMessage("go depth 15");
  }

  onStockfishMessage(event) {
      if (this.gameOver) return; // Prevent processing if the game is over
      console.log("Stockfish message:", event.data); // Debugging statement
      const match = event.data.match(/^bestmove\s([a-h][1-8][a-h][1-8])/);
      if (match) {
          const move = match[1];
          console.log("AI move:", move); // Debugging statement
          this.game.move({
              from: move.substring(0, 2),
              to: move.substring(2, 4),
              promotion: "q",
          });
          this.board.position(this.game.fen());
          // Check for game-ending conditions
          if (this.game.in_checkmate()) {
              const winner = this.currentPlayer === "white" ? "Black" : "White";
              this.endGame(`${winner} wins by checkmate!`, winner === this.playerColor ? "win" : "loss");
              return;
          }
          if (this.game.in_draw() || this.game.in_stalemate() || this.game.in_threefold_repetition()) {
              this.endGame("Draw!", "draw");
              return;
          }
          this.addIncrementToCurrentPlayer();
          this.switchPlayer();
      }
  }

  onDrop(source, target) {
      if (this.gameOver) return "snapback"; // Prevent moves if the game is over
      if (this.currentPlayer !== this.playerColor) return "snapback"; // Prevent player from moving out of turn
      const move = this.game.move({
          from: source,
          to: target,
          promotion: "q", // Always promote to a queen for simplicity
      });
      if (move === null) return "snapback"; // Illegal move
      this.board.position(this.game.fen());
      // Check for game-ending conditions
      if (this.game.in_checkmate()) {
          const winner = this.currentPlayer === "white" ? "White" : "Black";
          this.endGame(`${winner} wins by checkmate!`, winner === this.playerColor ? "win" : "loss");
          return;
      }
      if (this.game.in_draw() || this.game.in_stalemate() || this.game.in_threefold_repetition()) {
          this.endGame("Draw!", "draw");
          return;
      }
      this.addIncrementToCurrentPlayer();
      this.switchPlayer();
  }

    switchPlayer() {
      super.switchPlayer();
      if (this.currentPlayer !== this.playerColor) {
          this.makeAIMove();
      }
  }
}